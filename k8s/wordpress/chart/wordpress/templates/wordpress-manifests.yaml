---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-wordpress-secret
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-webserver
type: Opaque
stringData:
  wp-user: "{{ .Values.admin.username }}"
  wp-email: "{{ .Values.admin.email }}"
data:
  wp-password: "{{ .Values.admin.password }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-wordpress-config
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: wordpress-webserver
data:
  wp-install.sh: |
    # https://codex.wordpress.org/Installing_WordPress#Installing_WordPress
    # wait for connection
    timeout 60 bash -c 'until echo > /dev/tcp/localhost/80; do sleep 2; done'
    curl --fail --retry 5 --retry-delay 5 --retry-connrefused \
      --data-urlencode "weblog_title=WordPress on Google Kubernetes Engine" \
      --data-urlencode "user_name=${WP_ADMIN_USERNAME}" \
      --data-urlencode "admin_email=${WP_ADMIN_EMAIL}" \
      --data-urlencode "admin_password=${WP_ADMIN_PASSWORD}" \
      --data-urlencode "admin_password2=${WP_ADMIN_PASSWORD}" \
      --data-urlencode "pw_weak=1" \
      {{ if .Values.wordpress.subdirectory -}}
      "http://localhost/{{ .Values.wordpress.subdirectory }}/wp-admin/install.php?step=2"
      {{- else -}}
      "http://localhost/wp-admin/install.php?step=2"
      {{- end }}
  # .htaccess must be overwritten to allow connection to the /server-status endpoint.
  # By default, WordPress' .htaccess doesn't allow it.
  .htaccess: |
    # BEGIN WordPress
    <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteRule ^index\.php$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    # Allow Apache mod_status
    RewriteCond %{REQUEST_URI} !=/server-status
    RewriteRule . /index.php [L]
    </IfModule>
    # END WordPress
  entry-point.sh: |
    #!/bin/bash
    #
    # Copyright (C) 2017 Google Inc.
    #
    # This program is free software; you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation; either version 2 of the License, or
    # (at your option) any later version.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License along
    # with this program; if not, write to the Free Software Foundation, Inc.,
    # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

    set -euo pipefail

    # usage: file_env VAR [DEFAULT]
    #    ie: file_env 'XYZ_DB_PASSWORD' 'example'
    # (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
    #  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
    file_env() {
      local var="$1"
      local fileVar="${var}_FILE"
      local def="${2:-}"
      if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
        echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
        exit 1
      fi
      local val="$def"
      if [ "${!var:-}" ]; then
        val="${!var}"
      elif [ "${!fileVar:-}" ]; then
        val="$(< "${!fileVar}")"
      fi
      export "$var"="$val"
      unset "$fileVar"
    }

    if [[ "$1" == apache2* ]] || [ "$1" == php-fpm ]; then
      # allow use subdirectory in the wordpress site url and home configs, like: http://localhost/blog
      if ! [ -z "$WORDPRESS_SUBDIRECTORY" ]; then
          # force relative path
          WORDPRESS_SUBDIRECTORY=`echo $WORDPRESS_SUBDIRECTORY | sed 's/^\///g'`
          mkdir -p $WORDPRESS_SUBDIRECTORY
          cd $WORDPRESS_SUBDIRECTORY
      fi

      if [ "$(id -u)" = '0' ]; then
        case "$1" in
          apache2*)
            user="${APACHE_RUN_USER:-www-data}"
            group="${APACHE_RUN_GROUP:-www-data}"
            ;;
          *) # php-fpm
            user='www-data'
            group='www-data'
            ;;
        esac
      else
        user="$(id -u)"
        group="$(id -g)"
      fi

      if ! [ -e index.php -a -e wp-includes/version.php ]; then
        echo >&2 "WordPress not found in $PWD - copying now..."
        if [ "$(ls -A)" ]; then
          echo >&2 "WARNING: $PWD is not empty - press Ctrl+C now if this is an error!"
          ( set -x; ls -A; sleep 10 )
        fi
        tar --create \
          --file - \
          --one-file-system \
          --directory /usr/src/wordpress \
          --owner "$user" --group "$group" \
          . | tar --extract --file -
        echo >&2 "Complete! WordPress has been successfully copied to $PWD"
        sed -i "/That's all, stop editing!/ i\
    /*\\
    * WP_SITEURL and WP_HOME are configured to allow access from any hostname.\\
    */\\
    define('WP_SITEURL', 'https://' . \$_SERVER['HTTP_HOST'] . '/{{ .Values.wordpress.subdirectory }}');\\
    define('WP_HOME', 'https://' . \$_SERVER['HTTP_HOST'] . '/{{ .Values.wordpress.subdirectory }}');\\
    " wp-config-sample.php
        if [ ! -e .htaccess ]; then
          # NOTE: The "Indexes" option is disabled in the php:apache base image
          cat > .htaccess <<-'EOF'
            # BEGIN WordPress
            <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteBase /
            RewriteRule ^index\.php$ - [L]
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteRule . /index.php [L]
            </IfModule>
            # END WordPress
    EOF
          chown "$user:$group" .htaccess
        fi
      fi

      # TODO handle WordPress upgrades magically in the same way, but only if wp-includes/version.php's $wp_version is less than /usr/src/wordpress/wp-includes/version.php's $wp_version

      # allow any of these "Authentication Unique Keys and Salts." to be specified via
      # environment variables with a "WORDPRESS_" prefix (ie, "WORDPRESS_AUTH_KEY")
      uniqueEnvs=(
        AUTH_KEY
        SECURE_AUTH_KEY
        LOGGED_IN_KEY
        NONCE_KEY
        AUTH_SALT
        SECURE_AUTH_SALT
        LOGGED_IN_SALT
        NONCE_SALT
      )
      envs=(
        WORDPRESS_DB_HOST
        WORDPRESS_DB_USER
        WORDPRESS_DB_PASSWORD
        WORDPRESS_DB_NAME
        "${uniqueEnvs[@]/#/WORDPRESS_}"
        WORDPRESS_TABLE_PREFIX
        WORDPRESS_DEBUG
      )
      haveConfig=
      for e in "${envs[@]}"; do
        file_env "$e"
        if [ -z "$haveConfig" ] && [ -n "${!e}" ]; then
          haveConfig=1
        fi
      done

      # linking backwards-compatibility
      if [ -n "${!MYSQL_ENV_MYSQL_*}" ]; then
        haveConfig=1
        # host defaults to "mysql" below if unspecified
        : "${WORDPRESS_DB_USER:=${MYSQL_ENV_MYSQL_USER:-root}}"
        if [ "$WORDPRESS_DB_USER" = 'root' ]; then
          : "${WORDPRESS_DB_PASSWORD:=${MYSQL_ENV_MYSQL_ROOT_PASSWORD:-}}"
        else
          : "${WORDPRESS_DB_PASSWORD:=${MYSQL_ENV_MYSQL_PASSWORD:-}}"
        fi
        : "${WORDPRESS_DB_NAME:=${MYSQL_ENV_MYSQL_DATABASE:-}}"
      fi

      # only touch "wp-config.php" if we have environment-supplied configuration values
      if [ "$haveConfig" ]; then
        : "${WORDPRESS_DB_HOST:=mysql}"
        : "${WORDPRESS_DB_USER:=root}"
        : "${WORDPRESS_DB_PASSWORD:=}"
        : "${WORDPRESS_DB_NAME:=wordpress}"

        # version 4.4.1 decided to switch to windows line endings, that breaks our seds and awks
        # https://github.com/docker-library/wordpress/issues/116
        # https://github.com/WordPress/WordPress/commit/1acedc542fba2482bab88ec70d4bea4b997a92e4
        sed -ri -e 's/\r$//' wp-config*

        if [ ! -e wp-config.php ]; then
          awk '/^\/\*.*stop editing.*\*\/$/ && c == 0 { c = 1; system("cat") } { print }' wp-config-sample.php > wp-config.php <<'EOPHP'
    // If we're behind a proxy server and using HTTPS, we need to alert Wordpress of that fact
    // see also http://codex.wordpress.org/Administration_Over_SSL#Using_a_Reverse_Proxy
    if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
      $_SERVER['HTTPS'] = 'on';
    }

    EOPHP
          chown "$user:$group" wp-config.php
        fi

        # see http://stackoverflow.com/a/2705678/433558
        sed_escape_lhs() {
          echo "$@" | sed -e 's/[]\/$*.^|[]/\\&/g'
        }
        sed_escape_rhs() {
          echo "$@" | sed -e 's/[\/&]/\\&/g'
        }
        php_escape() {
          local escaped="$(php -r 'var_export(('"$2"') $argv[1]);' -- "$1")"
          if [ "$2" = 'string' ] && [ "${escaped:0:1}" = "'" ]; then
            escaped="${escaped//$'\n'/"' + \"\\n\" + '"}"
          fi
          echo "$escaped"
        }
        set_config() {
          key="$1"
          value="$2"
          var_type="${3:-string}"
          start="(['\"])$(sed_escape_lhs "$key")\2\s*,"
          end="\);"
          if [ "${key:0:1}" = '$' ]; then
            start="^(\s*)$(sed_escape_lhs "$key")\s*="
            end=";"
          fi
          sed -ri -e "s/($start\s*).*($end)$/\1$(sed_escape_rhs "$(php_escape "$value" "$var_type")")\3/" wp-config.php
        }

        set_config 'DB_HOST' "$WORDPRESS_DB_HOST"
        set_config 'DB_USER' "$WORDPRESS_DB_USER"
        set_config 'DB_PASSWORD' "$WORDPRESS_DB_PASSWORD"
        set_config 'DB_NAME' "$WORDPRESS_DB_NAME"

        for unique in "${uniqueEnvs[@]}"; do
          uniqVar="WORDPRESS_$unique"
          if [ -n "${!uniqVar}" ]; then
            set_config "$unique" "${!uniqVar}"
          else
            # if not specified, let's generate a random value
            currentVal="$(sed -rn -e "s/define\((([\'\"])$unique\2\s*,\s*)(['\"])(.*)\3\);/\4/p" wp-config.php)"
            if [ "$currentVal" = 'put your unique phrase here' ]; then
              set_config "$unique" "$(head -c1m /dev/urandom | sha1sum | cut -d' ' -f1)"
            fi
          fi
        done

        if [ "$WORDPRESS_TABLE_PREFIX" ]; then
          set_config '$table_prefix' "$WORDPRESS_TABLE_PREFIX"
        fi

        if [ "$WORDPRESS_DEBUG" ]; then
          set_config 'WP_DEBUG' 1 boolean
        fi

        TERM=dumb php -- <<'EOPHP'
    <?php
    // database might not exist, so let's try creating it (just to be safe)

    $stderr = fopen('php://stderr', 'w');

    // https://codex.wordpress.org/Editing_wp-config.php#MySQL_Alternate_Port
    //   "hostname:port"
    // https://codex.wordpress.org/Editing_wp-config.php#MySQL_Sockets_or_Pipes
    //   "hostname:unix-socket-path"
    list($host, $socket) = explode(':', getenv('WORDPRESS_DB_HOST'), 2);
    $port = 0;
    if (is_numeric($socket)) {
      $port = (int) $socket;
      $socket = null;
    }
    $user = getenv('WORDPRESS_DB_USER');
    $pass = getenv('WORDPRESS_DB_PASSWORD');
    $dbName = getenv('WORDPRESS_DB_NAME');

    $maxTries = 10;
    do {
      $mysql = new mysqli($host, $user, $pass, '', $port, $socket);
      if ($mysql->connect_error) {
        fwrite($stderr, "\n" . 'MySQL Connection Error: (' . $mysql->connect_errno . ') ' . $mysql->connect_error . "\n");
        --$maxTries;
        if ($maxTries <= 0) {
          exit(1);
        }
        sleep(3);
      }
    } while ($mysql->connect_error);

    if (!$mysql->query('CREATE DATABASE IF NOT EXISTS `' . $mysql->real_escape_string($dbName) . '`')) {
      fwrite($stderr, "\n" . 'MySQL "CREATE DATABASE" Error: ' . $mysql->error . "\n");
      $mysql->close();
      exit(1);
    }

    $mysql->close();
    EOPHP
      fi

      # now that we're definitely done writing configuration, let's clear out the relevant envrionment variables (so that stray "phpinfo()" calls don't leak secrets from our code)
      for e in "${envs[@]}"; do
        unset "$e"
      done
    fi

    exec "$@"

---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-wordpress
  labels: &WordPressDeploymentLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-webserver
spec:
  replicas: 1
  serviceName: {{ .Release.Name }}-wordpress-svc
  selector:
    matchLabels: *WordPressDeploymentLabels
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *WordPressDeploymentLabels
    spec:
      containers:
      - image: {{ .Values.wordpressImage }}
        name: wordpress
        env:
        # A WordPress' username.
        # The "WP" prefix is used, as "WORDPRESS" is reserved for env variables.
        # And we don't want to replace var directly in the curl command.
        - name: WP_ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-wordpress-secret
              key: wp-user
        # A WordPress' e-mail address.
        # The "WP" prefix is used, as "WORDPRESS" is reserved for env variables.
        # And we don't want to replace var directly in the curl command.
        - name: WP_ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-wordpress-secret
              key: wp-email
        # A WordPress' password.
        # The "WP" prefix is used, as "WORDPRESS" is reserved for env variables.
        # And we don't want to replace var directly in the curl command.
        - name: WP_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-wordpress-secret
              key: wp-password
        # A hostname and port of MySQL service.
        - name: WORDPRESS_DB_HOST
          value: {{ .Release.Name }}-mysql-svc
        # A username used for accessing the database.
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: wp-user
        # A password used for accessing the database.
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: wp-password
        # A database name used by WordPress.
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: {{ .Release.Name }}-wordpress-pvc
          mountPath: /var/www/html/{{ .Values.wordpress.subdirectory }}
          subPath: wp
        - name: config-map
          mountPath: /wp-install.sh
          subPath: wp-install.sh
          readOnly: true
        # .htaccess must be overwritten to allow connection to the /server-status endpoint.
        - name: apache-config
          {{ if .Values.wordpress.subdirectory -}}
          mountPath: /var/www/html/{{ .Values.wordpress.subdirectory }}/.htaccess
          {{- else -}}
          mountPath: /var/www/html
          {{- end }}
          subPath: .htaccess
          readOnly: true
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/bash"
              - "-eu"
              - "/wp-install.sh"
        readinessProbe:
          httpGet:
            path: /{{ .Values.wordpress.subdirectory }}
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /{{ .Values.wordpress.subdirectory }}
            port: 80
          initialDelaySeconds: 120
      - image: {{ .Values.apache.exporter.image }}
        name: apache-exporter
        args:
        - --scrape_uri=http://127.0.0.1/server-status?auto
        ports:
        - name: exporter
          containerPort: 9117
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9117
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9117
          initialDelaySeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
          periodSeconds: 10
      {{ if .Values.metrics.enabled }}
      - name: prometheus-to-sd
        image: {{ .Values.metrics.image }}
        command:
        - /monitor
        - --stackdriver-prefix=custom.googleapis.com
        - --source=apache:http://localhost:9117/metrics
        - --pod-id=$(POD_NAME)
        - --namespace-id=$(POD_NAMESPACE)
        - --monitored-resource-types=k8s
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      {{ end }}
      volumes:
      - name: apache-config
        configMap:
          name: {{ .Release.Name }}-wordpress-config
          items:
          - key: .htaccess
            path: .htaccess
      - name: config-map
        configMap:
          name: {{ .Release.Name }}-wordpress-config
          items:
          - key: wp-install.sh
            path: wp-install.sh
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-wordpress-pvc
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}"
        app.kubernetes.io/component: wordpress-webserver
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-wordpress-svc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-webserver
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-webserver
  {{ if .Values.enablePublicServiceAndIngress }}
  type: NodePort
  {{ else }}
  type: ClusterIP
  {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-apache-exporter-svc
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: wordpress-webserver
spec:
  ports:
  - name: exporter
    port: 9117
  selector:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: wordpress-webserver
  clusterIP: None
{{ if .Values.enablePublicServiceAndIngress }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-tls
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-webserver
data:
  tls.key: |
{{ .Values.tls.base64EncodedPrivateKey | indent 4 }}
  tls.crt: |
{{ .Values.tls.base64EncodedCertificate | indent 4 }}
type: kubernetes.io/tls
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-wordpress-ingress
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-webserver
spec:
  tls:
  - secretName: {{ .Release.Name }}-tls
  backend:
    serviceName: {{ .Release.Name }}-wordpress-svc
    servicePort: http
{{ end }}
